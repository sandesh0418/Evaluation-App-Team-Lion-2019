{"ast":null,"code":"import _defineProperty from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/editProgramSummary/editProgramSummary.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport uuid from 'uuid/v1';\nimport AddRubricMeasurePopup from './addRubricMeasurePopup';\nimport AddTestMeasurePopup from './addTestMeasurePopup';\nvar dummyMeasure = {\n  Measure_ID: '',\n  Description: '',\n  Percent_to_reach_target: 0,\n  Target_Score: 0\n};\nvar dummyOutcome = {\n  Outcome_ID: 0,\n  Description: '',\n  measures: [dummyMeasure]\n};\nvar dummySummary = {\n  title: \"\",\n  outcomes: [dummyOutcome]\n};\n\nvar OutcomeList = function OutcomeList(props) {\n  if (props.outcomes) {\n    return props.outcomes.map(function (currentOutcome) {\n      return React.createElement(Outcome, {\n        key: currentOutcome.Outcome_ID,\n        outcome: currentOutcome,\n        handleOutcomeChange: props.handleOutcomeChange,\n        handleAddRubricMeasure: props.handleAddRubricMeasure,\n        handleAddTestMeasure: props.handleAddTestMeasure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    });\n  } else {\n    return null;\n  }\n};\n\nvar Outcome = function Outcome(props) {\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col border p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"form-control\",\n    type: \"text\",\n    name: props.outcome.Outcome_ID,\n    value: props.outcome.Outcome_Name,\n    onChange: props.handleOutcomeNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    className: \"form-control\",\n    rows: \"7\",\n    name: props.outcome.Outcome_ID,\n    value: props.outcome.Description,\n    onChange: props.handleOutcomeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-8 border p-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, props.outcome.measures[0] ? React.createElement(Measures, {\n    measures: props.outcome.measures,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }) : null, React.createElement(DropdownButton, {\n    id: \"dropdown-basic-button\",\n    title: \"Add Measure\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Dropdown.Item, {\n    onSelect: props.handleAddTestMeasure,\n    eventKey: props.outcome.Outcome_ID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Add Test Measure\"), React.createElement(Dropdown.Item, {\n    onSelect: props.handleAddRubricMeasure,\n    eventKey: props.outcome.Outcome_ID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Add Rubric Measure\"))));\n};\n\nvar Measures = function Measures(props) {\n  return props.measures.map(function (measure) {\n    return React.createElement(\"div\", {\n      key: measure.Measure_ID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"At least \" + measure.Percent_to_reach_target * 100 + \"% of subjects score \" + (measure.Value_Name ? \"'\" + measure.Value_Name + \"'\" : measure.Target_Score * 100 + \"%\") + \" or higher on \" + measure.Tool_Name + \".\"), measure.Description ? React.createElement(\"p\", {\n      className: \"ml-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Additional description: \" + measure.Description) : null);\n  });\n};\n\nvar EditProgramSummary =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EditProgramSummary, _Component);\n\n  function EditProgramSummary(props) {\n    var _this;\n\n    _classCallCheck(this, EditProgramSummary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditProgramSummary).call(this, props));\n    _this.handleAddRubricMeasure = _this.handleAddRubricMeasure.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddTestMeasure = _this.handleAddTestMeasure.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOutcomeChange = _this.handleOutcomeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleOutcomeNameChange = _this.handleOutcomeNameChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddOutcome = _this.handleAddOutcome.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addNewMeasure = _this.addNewMeasure.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.closePopup = _this.closePopup.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSave = _this.handleSave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      programSummary: dummySummary,\n      showAddRubricMeasurePopup: false,\n      showAddTestMeasurePopup: false,\n      outcomeIdOfNewMeasure: \"hello\",\n      //The following values are passed to and manipulated in the addRubricMeasurePopup.\n      rubrics: null,\n      toolName: null,\n      //The following values are passed to both the addRubricMeasure and addTestMeasurePopups\n      description: null,\n      targetScore: 0,\n      percentToReachTarget: 0\n    };\n    return _this;\n  }\n\n  _createClass(EditProgramSummary, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get('/summaryReport/getSummary/' + localStorage.getItem(\"Cycle_Id\")).then(function (res) {\n        _this2.setState({\n          programSummary: res.data.programSummary\n        });\n      });\n      axios.get('/rubric/getListWithScale').then(function (res) {\n        if (res.data.status) {\n          _this2.setState({\n            rubrics: res.data.rubrics,\n            toolName: res.data.rubrics[0].Rubric_Title ? res.data.rubrics[0].Rubric_Title : null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleAddOutcome\",\n    value: function handleAddOutcome() {\n      var tempSummary = this.state.programSummary;\n      var newId = uuid();\n      tempSummary.outcomes.push({\n        Outcome_ID: newId,\n        Outcome_Name: \"Outcome #\",\n        Description: \"Enter outcome description.\",\n        measures: []\n      });\n      this.setState({\n        programSummary: tempSummary\n      });\n    }\n  }, {\n    key: \"handleOutcomeChange\",\n    value: function handleOutcomeChange(e) {\n      console.log(\"Entered handleOutcoemChange\");\n      var newDescription = e.target.value;\n      var id = e.target.name;\n      var index = this.state.programSummary.outcomes.findIndex(function (o) {\n        return o.Outcome_ID === id;\n      });\n      var tempSummary = this.state.programSummary;\n      tempSummary.outcomes[index].Description = newDescription;\n      this.setState({\n        programSummary: tempSummary\n      });\n    }\n  }, {\n    key: \"handleOutcomeNameChange\",\n    value: function handleOutcomeNameChange(e) {\n      console.log(\"Entered handleOutcoemNameChange\");\n      var index = this.state.programSummary.outcomes.findIndex(function (o) {\n        return o.Outcome_ID === e.target.name;\n      });\n      var tempSummary = this.state.programSummary;\n      tempSummary.outcomes[index].Outcome_Name = e.target.value;\n      this.setState({\n        programSummary: tempSummary\n      });\n    }\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n    }\n  }, {\n    key: \"handleAddTestMeasure\",\n    value: function handleAddTestMeasure(e) {\n      this.setState({\n        showAddTestMeasurePopup: true,\n        targetScore: 0,\n        toolName: \"Test\",\n        outcomeIdOfNewMeasure: e\n      });\n    }\n  }, {\n    key: \"handleAddRubricMeasure\",\n    value: function handleAddRubricMeasure(e) {\n      this.setState({\n        showAddRubricMeasurePopup: true,\n        outcomeIdOfNewMeasure: e,\n        targetScore: this.state.rubrics[0].scale[0].Value_Number,\n        toolName: this.state.rubrics[0].Rubric_Title\n      });\n    }\n  }, {\n    key: \"closePopup\",\n    value: function closePopup(e) {\n      this.setState({\n        showAddRubricMeasurePopup: false,\n        showAddTestMeasurePopup: false,\n        targetScore: 0,\n        toolName: \"\"\n      });\n    }\n  }, {\n    key: \"addNewMeasure\",\n    value: function addNewMeasure(e) {\n      var _this3 = this;\n\n      var newId = uuid();\n      var rubricIndex = this.state.rubrics.findIndex(function (r) {\n        return r.Rubric_Title === _this3.state.toolName;\n      });\n      var valueName = null;\n      var targetScore = this.state.targetScore;\n\n      if (rubricIndex > -1) {\n        valueName = this.state.rubrics[rubricIndex].scale[this.state.targetScore].Value_Name;\n      } else {\n        targetScore = targetScore / 100;\n      }\n\n      var newMeasure = {\n        Measure_ID: newId,\n        Description: this.state.description ? this.state.description : null,\n        Percent_to_reach_target: this.state.percentToReachTarget / 100,\n        Value_Name: valueName,\n        Target_Score: targetScore,\n        Tool_Name: this.state.toolName\n      };\n      var index = this.state.programSummary.outcomes.findIndex(function (o) {\n        return o.Outcome_ID === _this3.state.outcomeIdOfNewMeasure;\n      });\n      var tempSummary = this.state.programSummary;\n      tempSummary.outcomes[index].measures.push(newMeasure);\n      this.setState({\n        programSummary: tempSummary,\n        showAddRubricMeasurePopup: false,\n        showAddTestMeasurePopup: false,\n        toolName: \"\",\n        description: null,\n        targetScore: 0,\n        percentToReachTarget: 0\n      });\n    }\n  }, {\n    key: \"handleSave\",\n    value: function handleSave() {\n      var _this4 = this;\n\n      axios.post('/editProgramSummary/editProgramSummary', this.state.programSummary).then(function (res) {\n        _this4.props.history.push(\"/viewSummary\");\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var outcomes = '';\n\n      if (this.state.programSummary) {\n        outcomes = this.state.programSummary.outcomes;\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Edit Program Summary\"), React.createElement(OutcomeList, {\n        outcomes: outcomes,\n        handleOutcomeNameChange: this.handleOutcomeNameChange,\n        handleOutcomeChange: this.handleOutcomeChange,\n        handleAddRubricMeasure: this.handleAddRubricMeasure,\n        handleAddTestMeasure: this.handleAddTestMeasure,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-primary mb-4\",\n        onClick: this.handleAddOutcome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, \"Add Outcome\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-danger mb-4\",\n        onClick: this.handleSave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, \"Save Changes\")), this.state.showAddRubricMeasurePopup ? React.createElement(AddRubricMeasurePopup, {\n        closePopup: this.closePopup,\n        submit: this.addNewMeasure,\n        rubrics: this.state.rubrics,\n        handleInputChange: this.handleInputChange,\n        rubric: this.state.toolName,\n        description: this.state.description,\n        targetScore: this.state.targetScore,\n        percentToReachTarget: this.state.percentToReachTarget,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }) : null, this.state.showAddTestMeasurePopup ? React.createElement(AddTestMeasurePopup, {\n        closePopup: this.closePopup,\n        submit: this.addNewMeasure,\n        handleInputChange: this.handleInputChange,\n        testName: this.state.toolName,\n        description: this.state.description,\n        targetScore: this.state.targetScore,\n        percentToReachTarget: this.state.percentToReachTarget,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return EditProgramSummary;\n}(Component);\n\nexport { EditProgramSummary as default };","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/editProgramSummary/editProgramSummary.js"],"names":["React","Component","axios","Dropdown","DropdownButton","uuid","AddRubricMeasurePopup","AddTestMeasurePopup","dummyMeasure","Measure_ID","Description","Percent_to_reach_target","Target_Score","dummyOutcome","Outcome_ID","measures","dummySummary","title","outcomes","OutcomeList","props","map","currentOutcome","handleOutcomeChange","handleAddRubricMeasure","handleAddTestMeasure","Outcome","outcome","Outcome_Name","handleOutcomeNameChange","Measures","measure","Value_Name","Tool_Name","EditProgramSummary","bind","handleInputChange","handleAddOutcome","addNewMeasure","closePopup","handleSave","state","programSummary","showAddRubricMeasurePopup","showAddTestMeasurePopup","outcomeIdOfNewMeasure","rubrics","toolName","description","targetScore","percentToReachTarget","get","localStorage","getItem","then","res","setState","data","status","Rubric_Title","tempSummary","newId","push","e","console","log","newDescription","target","value","id","name","index","findIndex","o","scale","Value_Number","rubricIndex","r","valueName","newMeasure","post","history"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport uuid from 'uuid/v1';\nimport AddRubricMeasurePopup from './addRubricMeasurePopup';\nimport AddTestMeasurePopup from './addTestMeasurePopup';\n\nvar dummyMeasure = {\n    Measure_ID: '',\n    Description: '',\n    Percent_to_reach_target: 0,\n    Target_Score: 0\n}\n\nvar dummyOutcome = {\n    Outcome_ID: 0,\n    Description: '',\n    measures: [dummyMeasure]\n}\n\nvar dummySummary = {\n    title: \"\",\n    outcomes: [dummyOutcome]\n};\n\nconst OutcomeList = props => {\n\n    if(props.outcomes){\n    return props.outcomes.map(function(currentOutcome) {\n        return <Outcome \n                    key={currentOutcome.Outcome_ID} \n                    outcome={currentOutcome} \n                    handleOutcomeChange={props.handleOutcomeChange}  \n                    handleAddRubricMeasure={props.handleAddRubricMeasure}\n                    handleAddTestMeasure={props.handleAddTestMeasure}\n                />\n    })\n}\n    else{\n        return null;\n    }\n}\n\nconst Outcome = props => {\n    return (\n        <div className=\"row\">\n            <div className=\"col border p-3\">\n                <input \n                    className=\"form-control\"\n                    type=\"text\" \n                    name={props.outcome.Outcome_ID}\n                    value={props.outcome.Outcome_Name} \n                    onChange={props.handleOutcomeNameChange}\n                />\n                <textarea \n                    className=\"form-control\" \n                    rows=\"7\"\n                    name={props.outcome.Outcome_ID} \n                    value={props.outcome.Description} \n                    onChange={props.handleOutcomeChange} \n                />\n            </div>\n            <div className=\"col-8 border p-3\">\n                {props.outcome.measures[0] ? <Measures measures={props.outcome.measures} /> : null}\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Add Measure\">\n                    <Dropdown.Item \n                        onSelect={props.handleAddTestMeasure}\n                        eventKey={props.outcome.Outcome_ID}>\n                        Add Test Measure\n                    </Dropdown.Item>\n                    <Dropdown.Item \n                        onSelect={props.handleAddRubricMeasure}\n                        eventKey={props.outcome.Outcome_ID}>\n                        Add Rubric Measure\n                    </Dropdown.Item>\n                </DropdownButton>\n            </div>\n        </div>\n    )\n}\n\nconst Measures = props => {\n    return props.measures.map(measure => {\n        return (\n            <div key={measure.Measure_ID}>\n                <p>\n                    {\"At least \" + (measure.Percent_to_reach_target * 100) + \"% of subjects score \" + \n                    (measure.Value_Name ? \"'\" + measure.Value_Name + \"'\" : \n                    (measure.Target_Score * 100) + \"%\") +\" or higher on \" + measure.Tool_Name + \".\"}\n                 </p>\n                {measure.Description ? <p className=\"ml-3\">{\"Additional description: \" + measure.Description}</p> : null}\n            </div>\n        )\n    })\n}\n\nexport default class EditProgramSummary extends Component\n{\n\n    constructor(props)\n    {\n        super(props);\n        this.handleAddRubricMeasure = this.handleAddRubricMeasure.bind(this);\n        this.handleAddTestMeasure = this.handleAddTestMeasure.bind(this);\n        this.handleOutcomeChange = this.handleOutcomeChange.bind(this);\n        this.handleOutcomeNameChange = this.handleOutcomeNameChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleAddOutcome = this.handleAddOutcome.bind(this);\n        this.addNewMeasure = this.addNewMeasure.bind(this);  \n        this.closePopup = this.closePopup.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.state = {\n            programSummary: dummySummary,\n            showAddRubricMeasurePopup: false,\n            showAddTestMeasurePopup: false,\n            outcomeIdOfNewMeasure: \"hello\",\n            //The following values are passed to and manipulated in the addRubricMeasurePopup.\n            rubrics: null,\n            toolName: null,\n            //The following values are passed to both the addRubricMeasure and addTestMeasurePopups\n            description: null,\n            targetScore: 0,\n            percentToReachTarget: 0\n        }\n    }\n\n    componentDidMount()\n    {\n        axios.get('/summaryReport/getSummary/' + localStorage.getItem(\"Cycle_Id\"))\n            .then(res => {\n                this.setState({\n                    programSummary: res.data.programSummary\n                })\n        })\n        axios.get('/rubric/getListWithScale')\n            .then(res => {\n                if(res.data.status)\n                {\n                    this.setState({\n                        rubrics: res.data.rubrics,\n                        toolName: (res.data.rubrics[0].Rubric_Title ? res.data.rubrics[0].Rubric_Title : null)\n                    })\n                }\n        })\n    }\n\n    handleAddOutcome()\n    {\n        let tempSummary = this.state.programSummary;\n        let newId = uuid();\n        tempSummary.outcomes.push({\n            Outcome_ID: newId,\n            Outcome_Name: \"Outcome #\",\n            Description: \"Enter outcome description.\",\n            measures: []\n        })\n\n        this.setState({\n            programSummary: tempSummary\n        })\n    }\n\n    handleOutcomeChange(e)\n    {\n        console.log(\"Entered handleOutcoemChange\");\n        let newDescription = e.target.value;\n        let id = e.target.name;\n        let index = this.state.programSummary.outcomes.findIndex(o => o.Outcome_ID === id);\n        let tempSummary = this.state.programSummary;\n        tempSummary.outcomes[index].Description = newDescription;\n\n        this.setState({\n            programSummary: tempSummary\n        })\n    }\n\n    handleOutcomeNameChange(e)\n    {\n        console.log(\"Entered handleOutcoemNameChange\");\n        let index = this.state.programSummary.outcomes.findIndex(o => o.Outcome_ID === e.target.name);\n        let tempSummary = this.state.programSummary;\n        tempSummary.outcomes[index].Outcome_Name = e.target.value;\n\n        this.setState({\n            programSummary: tempSummary\n        })\n    }\n\n    handleInputChange(e)\n    {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleAddTestMeasure(e)\n    {\n        this.setState({\n            showAddTestMeasurePopup: true,\n            targetScore: 0,\n            toolName: \"Test\",\n            outcomeIdOfNewMeasure: e\n        })\n    }\n\n    handleAddRubricMeasure(e)\n    {\n        this.setState({\n            showAddRubricMeasurePopup: true,\n            outcomeIdOfNewMeasure: e,\n            targetScore: this.state.rubrics[0].scale[0].Value_Number,\n            toolName: this.state.rubrics[0].Rubric_Title\n        })\n    }\n\n    closePopup(e)\n    {\n        this.setState({\n            showAddRubricMeasurePopup: false,\n            showAddTestMeasurePopup: false,\n            targetScore: 0,\n            toolName: \"\",\n        })\n    }\n\n    addNewMeasure(e)\n    {\n        let newId = uuid();\n\n        let rubricIndex = this.state.rubrics.findIndex(r => r.Rubric_Title === this.state.toolName);\n        let valueName = null;\n        let targetScore = this.state.targetScore;\n\n        if (rubricIndex > -1)\n        {\n            valueName = this.state.rubrics[rubricIndex].scale[this.state.targetScore].Value_Name;\n        }\n        else\n        {\n            targetScore = targetScore / 100;\n        }\n\n        let newMeasure = {\n            Measure_ID: newId,\n            Description: (this.state.description ? this.state.description : null),\n            Percent_to_reach_target: (this.state.percentToReachTarget / 100),\n            Value_Name: valueName,\n            Target_Score: targetScore,\n            Tool_Name: this.state.toolName\n        }\n\n        let index = this.state.programSummary.outcomes.findIndex(o => o.Outcome_ID === this.state.outcomeIdOfNewMeasure);\n        let tempSummary = this.state.programSummary;\n        tempSummary.outcomes[index].measures.push(newMeasure);\n        this.setState({\n            programSummary: tempSummary,\n            showAddRubricMeasurePopup: false,\n            showAddTestMeasurePopup: false,\n            toolName: \"\",\n            description: null,\n            targetScore: 0,\n            percentToReachTarget: 0\n        })\n    }\n\n    handleSave()\n    {\n        axios.post('/editProgramSummary/editProgramSummary', this.state.programSummary)\n            .then(res => {\n                this.props.history.push(\"/viewSummary\");\n            })\n    }\n\n    render()\n    {\n        var outcomes = '';\n        if(this.state.programSummary){\n            outcomes=this.state.programSummary.outcomes \n            \n        }\n        return (\n            <>\n            <h1>Edit Program Summary</h1>\n            <OutcomeList \n                 outcomes={outcomes}\n                 handleOutcomeNameChange={this.handleOutcomeNameChange}\n                 handleOutcomeChange={this.handleOutcomeChange}\n                 handleAddRubricMeasure={this.handleAddRubricMeasure}\n                 handleAddTestMeasure={this.handleAddTestMeasure} \n            />\n            <button className=\"btn btn-primary mb-4\" onClick={this.handleAddOutcome}>Add Outcome</button>\n            <div><button className=\"btn btn-danger mb-4\" onClick={this.handleSave}>Save Changes</button></div>\n            {this.state.showAddRubricMeasurePopup ? <AddRubricMeasurePopup \n                                                        closePopup={this.closePopup} \n                                                        submit={this.addNewMeasure}\n                                                        rubrics={this.state.rubrics}\n                                                        handleInputChange={this.handleInputChange}\n                                                        rubric={this.state.toolName}\n                                                        description={this.state.description}\n                                                        targetScore={this.state.targetScore}\n                                                        percentToReachTarget={this.state.percentToReachTarget}\n                                                    /> : null}\n            {this.state.showAddTestMeasurePopup ? <AddTestMeasurePopup\n                                                        closePopup={this.closePopup}\n                                                        submit={this.addNewMeasure}\n                                                        handleInputChange={this.handleInputChange}\n                                                        testName={this.state.toolName}\n                                                        description={this.state.description}\n                                                        targetScore={this.state.targetScore}\n                                                        percentToReachTarget={this.state.percentToReachTarget}\n                                                    /> : null}\n            </>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}