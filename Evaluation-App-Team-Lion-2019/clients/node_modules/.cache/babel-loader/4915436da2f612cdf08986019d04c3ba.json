{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/createRubric.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCriteria, getTopRow, getData, setTopRow, setCriteria, setData } from '../../actions/rubric';\nimport { Table, FormControl } from 'react-bootstrap';\n\nvar createRubric =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(createRubric, _Component);\n\n  function createRubric(props) {\n    var _this;\n\n    _classCallCheck(this, createRubric);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(createRubric).call(this));\n    _this.state = {\n      value: props.value\n    };\n    return _this;\n  }\n\n  _createClass(createRubric, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getCriteria();\n      this.props.getData();\n      this.props.getTopRow();\n      this.timer = null;\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, {\n    key: \"onChangeTopRow\",\n    value: function onChangeTopRow(e) {\n      if (e.target.value != null) {\n        this.props.setTopRow(e.target.name, e.target.value);\n      }\n    }\n  }, {\n    key: \"onChangeData\",\n    value: function onChangeData(e) {\n      if (e.target.value != null) {\n        this.props.setData(e.target.name, e.target.value);\n      }\n    }\n  }, {\n    key: \"onChangeCriteria\",\n    value: function onChangeCriteria(e) {\n      if (e.target.value != null) {\n        this.props.setCriteria(e.target.name, e.target.value);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var weight = false;\n      var display = \"\";\n      var row = \"\";\n      var _this$props$rubric = this.props.rubric,\n          topRow = _this$props$rubric.topRow,\n          criteria = _this$props$rubric.criteria,\n          data = _this$props$rubric.data;\n\n      if (topRow) {\n        display = topRow.map(function (singleValue) {\n          return React.createElement(\"th\", {\n            key: singleValue.Row_Id,\n            className: \"borderedCell\",\n            style: {\n              padding: \"0\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, React.createElement(FormControl, {\n            as: \"textarea\",\n            \"aria-label\": \"With textarea\",\n            name: singleValue.Row_Id,\n            onChange: _this2.onChangeTopRow.bind(_this2),\n            value: singleValue.name,\n            style: {\n              width: \"100%\"\n            },\n            className: \"measureTitle centerAlign cells\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }));\n        });\n      } else {\n        console.log(\"Loading\");\n      }\n\n      if (criteria && data) {\n        var column;\n        var i = 0;\n\n        if (criteria[0][0].weight >= 0) {\n          weight = true;\n          row = criteria.map(function (singleValue, count) {\n            return React.createElement(\"tr\", {\n              key: count,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: singleValue[0].Row_Id,\n              onChange: _this2.onChangeCriteria.bind(_this2),\n              value: singleValue[0].criteria,\n              style: {\n                width: \"100%\"\n              },\n              className: \"measureTitle centerAlign cells\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            }), data[count].map(function (value, index) {\n              return React.createElement(\"td\", {\n                key: index,\n                className: \"borderedCell\",\n                style: {\n                  padding: \"0\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 116\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: value.Row_Id,\n                onChange: _this2.onChangeData.bind(_this2),\n                value: value.description,\n                style: {\n                  width: \"100%\"\n                },\n                className: \"measureTitle centerAlign cells\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 117\n                },\n                __self: this\n              }));\n            }), React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: singleValue[0].Row_Id,\n              onChange: _this2.onChangeCriteria.bind(_this2),\n              value: singleValue.weight,\n              style: {\n                width: \"100%\"\n              },\n              className: \"measureTitle centerAlign cells\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            }));\n          });\n        } else {\n          weight = false;\n          row = criteria.map(function (singleValue, count) {\n            return React.createElement(\"tr\", {\n              key: count,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: singleValue[0].Row_Id,\n              onChange: _this2.onChangeCriteria.bind(_this2),\n              value: singleValue[0].criteria,\n              style: {\n                width: \"100%\"\n              },\n              className: \"measureTitle centerAlign cells\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151\n              },\n              __self: this\n            }), data[count].map(function (value, index) {\n              return React.createElement(\"td\", {\n                key: index,\n                className: \"borderedCell\",\n                style: {\n                  padding: \"0\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 164\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: value.Row_Id,\n                onChange: _this2.onChangeData.bind(_this2),\n                value: value.description,\n                style: {\n                  width: \"100%\"\n                },\n                className: \"measureTitle centerAlign cells\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 165\n                },\n                __self: this\n              }));\n            }));\n          });\n        }\n      }\n\n      return React.createElement(Table, {\n        bordered: true,\n        striped: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Criteria\"), display, weight ? React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Weight\") : \"\")), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, row));\n    }\n  }]);\n\n  return createRubric;\n}(Component);\n\ncreateRubric.propTypes = {\n  getCriteria: PropTypes.func.isRequired,\n  getData: PropTypes.func.isRequired,\n  getTopRow: PropTypes.func.isRequired,\n  rubric: PropTypes.object.isRequired,\n  setTopRow: PropTypes.func.isRequired,\n  setCriteria: PropTypes.func.isRequired,\n  setData: PropTypes.func.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    rubric: state.rubric\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getCriteria: getCriteria,\n  getData: getData,\n  getTopRow: getTopRow,\n  setTopRow: setTopRow,\n  setCriteria: setCriteria,\n  setData: setData\n})(createRubric);","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/createRubric.js"],"names":["React","Component","PropTypes","connect","getCriteria","getTopRow","getData","setTopRow","setCriteria","setData","Table","FormControl","createRubric","props","state","value","timer","e","preventDefault","target","name","weight","display","row","rubric","topRow","criteria","data","map","singleValue","Row_Id","padding","onChangeTopRow","bind","width","console","log","column","i","count","onChangeCriteria","index","onChangeData","description","propTypes","func","isRequired","object","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getCriteria, getTopRow, getData, setTopRow, setCriteria, setData} from '../../actions/rubric';\nimport { Table, FormControl } from 'react-bootstrap';\n\n\n\n\n\n\n\nclass createRubric extends Component{\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            value: props.value\n        };\n    }\n    componentDidMount(){\n        this.props.getCriteria();\n        this.props.getData();\n        this.props.getTopRow();\n        this.timer = null;\n      }\n\n \n    onSubmit(e){\n        e.preventDefault();\n    }\n\n   onChangeTopRow(e){\n       if(e.target.value != null){\n        this.props.setTopRow(e.target.name, e.target.value);\n       }\n      \n   }\n      \n   onChangeData(e){\n    if(e.target.value != null){\n        this.props.setData(e.target.name, e.target.value);\n    }\n    }\n\n   onChangeCriteria(e){\n\n    if(e.target.value != null){\n        this.props.setCriteria(e.target.name, e.target.value);\n    }\n    }\n   \n    \n   \n      \n    render(){\n        var weight = false;\n        var display = \"\";\n        var row = \"\";\n        \n        let { topRow, criteria, data} = this.props.rubric;\n\n       \n\n       if(topRow){\n        \n        display= topRow.map(singleValue => (\n                <th key ={singleValue.Row_Id} className=\"borderedCell\" style = {{padding: \"0\"}}>\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label=\"With textarea\"\n                                name={singleValue.Row_Id}\n                                onChange = {this.onChangeTopRow.bind(this)}\n                                value={singleValue.name}\n                                style={{width: \"100%\"}}\n                                className=\"measureTitle centerAlign cells\"/></th>\n                                ))\n\n      \n\n       }\n\n       else{\n          \n        console.log(\"Loading\");  \n\n        \n        \n               \n\n       \n           \n       }\n       if(criteria && data){\n          var column;\n          var i = 0;\n        if(criteria[0][0].weight >= 0){\n            weight = true;\n            \n            row = criteria.map((singleValue, count) => (\n                <tr key ={count} className=\"borderedCell\" style = {{padding: \"0\"}}>\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label=\"With textarea\"\n                                name={singleValue[0].Row_Id}\n                                onChange = {this.onChangeCriteria.bind(this)}\n                                value={singleValue[0].criteria}\n                                style={{width: \"100%\"}}\n                                className=\"measureTitle centerAlign cells\"/>\n                                \n               \n           {data[count].map((value, index) => (\n\n               \n                <td key ={index} className=\"borderedCell\" style = {{padding: \"0\"}}>\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label=\"With textarea\"\n                                name={value.Row_Id}\n                                onChange = {this.onChangeData.bind(this)}\n                                value={value.description}\n                                style={{width: \"100%\"}}\n                                className=\"measureTitle centerAlign cells\"/></td>\n                                ))}\n\n       \n\n            {\n                <FormControl \n                as = \"textarea\"\n                aria-label=\"With textarea\"\n                name={singleValue[0].Row_Id}\n                onChange = {this.onChangeCriteria.bind(this)}\n                value={singleValue.weight}\n                style={{width: \"100%\"}}\n                className=\"measureTitle centerAlign cells\"/>\n            }\n\n           \n\n                    </tr>\n                    \n            ));\n        }\n        else{\n            weight = false\n\n            row = criteria.map((singleValue, count) => (\n                <tr key ={count} className=\"borderedCell\" style = {{padding: \"0\"}}>\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label=\"With textarea\"\n                                name={singleValue[0].Row_Id}\n                                onChange = {this.onChangeCriteria.bind(this)}\n                                value={singleValue[0].criteria}\n                                style={{width: \"100%\"}}\n                                className=\"measureTitle centerAlign cells\"/>\n                                \n               \n           {data[count].map((value, index) => (\n\n               \n                <td key ={index} className=\"borderedCell\" style = {{padding: \"0\"}}>\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label=\"With textarea\"\n                                name={value.Row_Id}\n                                onChange = {this.onChangeData.bind(this)}\n                                value={value.description}\n                                style={{width: \"100%\"}}\n                                className=\"measureTitle centerAlign cells\"/></td>\n                                ))}\n                   </tr>\n                    \n            ));\n        }\n    }\n       \n        \n       \n        return(\n           \n           \n           \n            <Table bordered striped>\n            <thead>\n                <tr>\n                    <th className=\"centered borderedCell\">Criteria</th>\n            {display}\n            { weight ? <th className=\"centered borderedCell\">Weight</th> : \"\" }\n           \n            </tr>\n            </thead>\n            <tbody>\n                \n                { row }\n                \n            </tbody>\n            </Table>\n            \n        );\n    }\n}\n\ncreateRubric.propTypes = {\n    getCriteria: PropTypes.func.isRequired,\n    getData: PropTypes.func.isRequired,\n    getTopRow: PropTypes.func.isRequired,\n    rubric: PropTypes.object.isRequired,\n    setTopRow: PropTypes.func.isRequired,\n    setCriteria: PropTypes.func.isRequired,\n    setData: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n        auth: state.auth,\n        rubric: state.rubric\n})\n\nexport default connect (mapStateToProps, { getCriteria, getData, getTopRow, setTopRow, setCriteria,setData})(createRubric);"]},"metadata":{},"sourceType":"module"}