{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/measureReport.js\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { O_RDONLY } from 'constants';\n\nfunction CriteriaTitles(props) {\n  return props.criteria.map(function (c) {\n    return React.createElement(\"th\", {\n      key: c.criteriaTitle,\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, c.criteriaTitle + \" score\");\n  });\n}\n\nfunction Row(props) {\n  return props.subjectList.map(function (s) {\n    return React.createElement(Evaluation, {\n      key: s.subjectId,\n      weighted: props.weighted,\n      scale: props.scale,\n      subject: s,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n  });\n}\n\nfunction Evaluation(props) {\n  var totalScore = 0;\n  var totalEvaluations = props.subject.evaluators.length;\n  var averageTotalScore;\n  return props.subject.evaluators.map(function (e) {\n    var score = getAverage(e.scores, props.weighted);\n    props.pushClassOverallScores(score);\n    totalScore += score;\n    averageTotalScore = totalScore / totalEvaluations;\n    return React.createElement(\"tr\", {\n      key: e.evaluatorEmail,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, e.evaluatorEmail === props.subject.evaluators[0].evaluatorEmail ? React.createElement(\"th\", {\n      scope: \"row\",\n      rowSpan: totalEvaluations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, props.subject.subjectName) : null, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, e.evaluatorName), React.createElement(Scores, {\n      scores: e.scores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), props.scale[0].valueName ? React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, score + \" - \" + mapAverageScoreToValueName(props.scale, score)) : null, e.evaluatorEmail === props.subject.evaluators[props.subject.evaluators.length - 1].evaluatorEmail && props.scale[0].valueName ? React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, averageTotalScore + \" - \" + mapAverageScoreToValueName(props.scale, averageTotalScore)) : React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  });\n}\n\nfunction getAverage(scores, weighted) {\n  var score;\n\n  if (weighted) {\n    score = calculateWeightedAverage(scores);\n  } else {\n    score = calculateUnweightedAverage(scores);\n  }\n\n  return score;\n}\n\nfunction calculateUnweightedAverage(scores) {\n  var totalScore = 0;\n  var numberOfCriteria = 0;\n  scores.forEach(function (s) {\n    totalScore = totalScore + parseInt(s.score);\n    numberOfCriteria++;\n  });\n  return Math.round(totalScore / numberOfCriteria * 100000) / 100000;\n}\n\nfunction calculateWeightedAverage(scores) {\n  var totalScore = 0;\n  scores.forEach(function (s) {\n    totalScore = totalScore + s.score * (s.weight / 100);\n  });\n  return Math.round(totalScore * 100000) / 100000;\n}\n\nfunction mapAverageScoreToValueName(scale, averageScore) {\n  var score = averageScore;\n\n  if (score < 1) {\n    score = 1;\n  }\n\n  var description = scale.find(function (s) {\n    return s.valueNumber === Math.floor(score);\n  });\n  return description.valueName;\n}\n\nfunction Scores(props) {\n  return props.scores.map(function (s) {\n    return React.createElement(\"td\", {\n      key: s.criteriaTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, s.valueName ? s.score + \" \" + s.valueName : s.score * 100);\n  });\n}\n\nfunction CriteriaAverages(props) {\n  return props.criteria.map(function (c) {\n    var totalScore = 0;\n    var totalSubjects = 0;\n    props.subjectList.forEach(function (s) {\n      s.evaluators.forEach(function (e) {\n        totalScore += e.scores.find(function (s) {\n          return s.criteriaTitle === c.criteriaTitle;\n        }).score;\n        totalSubjects++;\n      });\n    });\n    var averageScore = totalScore / totalSubjects;\n    return React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, averageScore.toFixed(2) + \" - \" + mapAverageScoreToValueName(props.scale, averageScore));\n  });\n}\n\nvar CreateAssignment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateAssignment, _Component);\n\n  function CreateAssignment(props) {\n    var _this;\n\n    _classCallCheck(this, CreateAssignment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateAssignment).call(this, props));\n    _this.pushClassOverallScores = _this.pushClassOverallScores.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      measure: null,\n      classOverallScores: []\n    };\n    return _this;\n  }\n\n  _createClass(CreateAssignment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Axios.get('/measureReport/measureReport/' + this.props.match.params.measureId).then(function (res) {\n        console.log(res.data);\n\n        _this2.setState({\n          measure: res.data.measure\n        });\n      });\n    }\n  }, {\n    key: \"pushClassOverallScores\",\n    value: function pushClassOverallScores(score) {\n      var tempScores = this.state.classOverallScores;\n      tempScores.push(score);\n      this.setState({\n        classOverallScores: tempScores\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.measure === null) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, \"loading...\");\n      } else if (this.state.measure.subjectList.length === 0) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, \"There is no evaluation data for this measure.\");\n      } else {\n        return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, this.state.measure.measureName), this.state.measure.measureDescription !== \"null\" ? React.createElement(\"details\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"summary\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"Additional description:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, this.state.measure.measureDescription)) : null, React.createElement(\"table\", {\n          className: \"table table-bordered\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(\"thead\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          id: \"criteria\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          scope: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, \"Subject Name\"), React.createElement(\"th\", {\n          scope: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, \"Evaluator\"), React.createElement(CriteriaTitles, {\n          criteria: this.state.measure.subjectList[0].evaluators[0].scores,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }), this.state.measure.scale[0].valueName ? React.createElement(React.Fragment, null, React.createElement(\"th\", {\n          scope: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, \"Overall Score\"), React.createElement(\"th\", {\n          scope: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, \"Average Score\")) : null)), React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(Row, {\n          subjectList: this.state.measure.subjectList,\n          weighted: this.state.measure.weighted,\n          scale: this.state.measure.scale,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          scope: \"row\",\n          colSpan: \"2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"Group Averages\"), React.createElement(CriteriaAverages, {\n          criteria: this.state.measure.subjectList[0].evaluators[0].scores,\n          subjectList: this.state.measure.subjectList,\n          scale: this.state.measure.scale,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        })))));\n      }\n    }\n  }]);\n\n  return CreateAssignment;\n}(Component);\n\nexport { CreateAssignment as default };","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/measureReport.js"],"names":["React","Component","Axios","O_RDONLY","CriteriaTitles","props","criteria","map","c","criteriaTitle","Row","subjectList","s","subjectId","weighted","scale","Evaluation","totalScore","totalEvaluations","subject","evaluators","length","averageTotalScore","e","score","getAverage","scores","pushClassOverallScores","evaluatorEmail","subjectName","evaluatorName","valueName","mapAverageScoreToValueName","calculateWeightedAverage","calculateUnweightedAverage","numberOfCriteria","forEach","parseInt","Math","round","weight","averageScore","description","find","valueNumber","floor","Scores","CriteriaAverages","totalSubjects","toFixed","CreateAssignment","bind","state","measure","classOverallScores","get","match","params","measureId","then","res","console","log","data","setState","tempScores","push","measureName","measureDescription"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Axios from 'axios';\nimport { O_RDONLY } from 'constants';\n\nfunction CriteriaTitles(props)\n{\n    return props.criteria.map(c => {\n        return <th key={c.criteriaTitle} scope=\"col\">{c.criteriaTitle + \" score\"}</th>\n    })\n}\n\nfunction Row(props)\n{\n    return props.subjectList.map(s => {\n        return <Evaluation key={s.subjectId} weighted={props.weighted} scale={props.scale} subject={s} />\n    })\n}\n\nfunction Evaluation(props)\n{\n    let totalScore = 0;\n    let totalEvaluations = props.subject.evaluators.length;\n\n    let averageTotalScore;\n\n    return props.subject.evaluators.map(e => {\n        let score = getAverage(e.scores, props.weighted);\n        props.pushClassOverallScores(score);\n        totalScore += score;\n        averageTotalScore = (totalScore / totalEvaluations);\n        return (\n            <tr key={e.evaluatorEmail}>\n\n                {e.evaluatorEmail === props.subject.evaluators[0].evaluatorEmail ? \n                    <th scope=\"row\" rowSpan={totalEvaluations}>{props.subject.subjectName}</th>\n                : null}\n\n                <td>{e.evaluatorName}</td>\n                <Scores scores={e.scores} />\n\n                {props.scale[0].valueName ? \n                    <td>{score + \" - \" + mapAverageScoreToValueName(props.scale, score)}</td>\n                : null }\n\n                {e.evaluatorEmail === props.subject.evaluators[props.subject.evaluators.length - 1].evaluatorEmail && props.scale[0].valueName ? \n                    <td>{averageTotalScore + \" - \" + \n                    mapAverageScoreToValueName(props.scale, averageTotalScore)}</td>\n                : <td></td>}\n        \n           </tr>\n        )\n    })\n}\n\nfunction getAverage(scores, weighted)\n{\n    let score;\n    if(weighted)\n    {\n        score = calculateWeightedAverage(scores);\n    }\n    else\n    {\n        score = calculateUnweightedAverage(scores);\n    }\n\n    return score;\n}\n\nfunction calculateUnweightedAverage(scores)\n{\n    let totalScore = 0;\n    let numberOfCriteria = 0;\n    scores.forEach(s => {\n            totalScore = totalScore + parseInt(s.score);\n            numberOfCriteria++;\n    });\n    return Math.round((totalScore / numberOfCriteria) * 100000) / 100000;\n}\n\nfunction calculateWeightedAverage(scores)\n{\n    let totalScore = 0;\n    scores.forEach(s => {\n        totalScore = totalScore + (s.score * (s.weight / 100))\n    });\n    \n    return Math.round(totalScore * 100000) / 100000;\n}\n\nfunction mapAverageScoreToValueName(scale, averageScore)\n{\n    let score = averageScore;\n    if (score < 1)\n    {\n        score = 1;\n    }\n\n    let description = scale.find(s => s.valueNumber === Math.floor(score));\n    return description.valueName;\n}\n\nfunction Scores(props)\n{\n    return props.scores.map(s => {\n        return (\n                <td key={s.criteriaTitle}>{s.valueName ? s.score + \" \" + s.valueName : (s.score * 100)}</td>\n        )\n    })\n}\n\nfunction CriteriaAverages(props)\n{\n    return props.criteria.map(c => {\n        let totalScore = 0;\n        let totalSubjects = 0;\n\n        props.subjectList.forEach(s => {\n            s.evaluators.forEach(e => {\n                totalScore += e.scores.find(s => s.criteriaTitle === c.criteriaTitle).score;\n                totalSubjects++;\n            })\n        })\n\n        let averageScore = (totalScore / totalSubjects);\n\n        return <td>{averageScore.toFixed(2) + \" - \" + mapAverageScoreToValueName(props.scale, averageScore)}</td>\n    })\n}\n\nexport default class CreateAssignment extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.pushClassOverallScores = this.pushClassOverallScores.bind(this);\n        this.state={\n            measure: null,\n            classOverallScores: [],\n        }\n    }\n\n    componentDidMount()\n    {\n        Axios.get('/measureReport/measureReport/' + this.props.match.params.measureId)\n            .then(res => {\n                console.log(res.data);\n                this.setState({\n                    measure: res.data.measure\n                })\n            })\n    }\n\n    pushClassOverallScores(score)\n    {\n        let tempScores = this.state.classOverallScores;\n        tempScores.push(score);\n\n        this.setState({\n            classOverallScores: tempScores\n        })\n    }\n\n    render()\n    {\n        if (this.state.measure === null)\n        {\n            return <p>loading...</p>\n        }\n        else if (this.state.measure.subjectList.length === 0)\n        {\n            return <p>There is no evaluation data for this measure.</p>\n        }\n        else\n        {\n            return (\n                <>\n                    <h1>{this.state.measure.measureName}</h1>\n                    {this.state.measure.measureDescription !== \"null\" ? \n                        <details>\n                            <summary>Additional description:</summary>\n                            <p>{this.state.measure.measureDescription}</p>\n                        </details>\n                    : null}\n                    <table className=\"table table-bordered\">\n                        <thead>\n                            <tr id=\"criteria\"> \n                                <th scope=\"col\">Subject Name</th>\n                                <th scope=\"col\">Evaluator</th>\n                                <CriteriaTitles criteria={this.state.measure.subjectList[0].evaluators[0].scores} />\n                                {this.state.measure.scale[0].valueName ?\n                                    <>\n                                        <th scope=\"col\">Overall Score</th>\n                                        <th scope=\"col\">Average Score</th>\n                                    </>\n                                : null }\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <Row \n                                subjectList={this.state.measure.subjectList} \n                                weighted={this.state.measure.weighted}\n                                scale={this.state.measure.scale}/>\n                            <tr>\n                                <th scope=\"row\" colSpan=\"2\">Group Averages</th>\n                                <CriteriaAverages \n                                    criteria={this.state.measure.subjectList[0].evaluators[0].scores}\n                                    subjectList={this.state.measure.subjectList}\n                                    scale={this.state.measure.scale}/>\n                            </tr>\n                        </tbody>\n                    </table>\n                </>\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}