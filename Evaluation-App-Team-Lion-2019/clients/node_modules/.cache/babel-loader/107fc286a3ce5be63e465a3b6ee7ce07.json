{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/evaluateTest.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\n\nvar StubjectList = function StubjectList(props) {\n  return props.subjectList.map(function (s) {\n    return React.createElement(\"div\", {\n      className: \"row no-gutters\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, s.subjectName + \":\")), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: s.subjectId,\n      type: \"number\",\n      min: \"0\",\n      max: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    })));\n  });\n};\n\nfunction updateScoresInList(file) {\n  var fileReader = new FileReader();\n\n  fileReader.onloadend = function (e) {\n    var lines = fileReader.result.split(\"\\n\");\n    console.log(lines);\n  };\n\n  fileReader.readAsText(file);\n}\n\nvar EvaluateTest =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EvaluateTest, _Component);\n\n  function EvaluateTest(props) {\n    var _this;\n\n    _classCallCheck(this, EvaluateTest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EvaluateTest).call(this, props));\n    _this.fileInput = React.createRef();\n    _this.submitScores = _this.submitScores.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      subjectList: [],\n      subjectId: null,\n      measure: null,\n      showFileAlert: false\n    };\n    return _this;\n  }\n\n  _createClass(EvaluateTest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(this.props.match.params.assignment);\n      axios.get('http://localhost:5000/assignments/subjectList/' + this.props.match.params.assignment).then(function (res) {\n        _this2.setState({\n          subjectList: res.data.subjectList,\n          subjectId: res.data.subjectList[0]\n        });\n      });\n      axios.get('http://localhost:5000/assignments/assignmentMeasure/' + this.props.match.params.assignment).then(function (res) {\n        _this2.setState({\n          measure: res.data.measure\n        });\n      });\n    }\n  }, {\n    key: \"changeFile\",\n    value: function changeFile(e) {\n      if (!(this.fileInput.current.files[0].type == \"text/csv\")) {\n        this.setState({\n          showFileAlert: true\n        });\n      } else {\n        this.setState({\n          showFileAlert: false\n        });\n        updateScoresInList(this.fileInput.current.files[0]);\n      }\n    }\n  }, {\n    key: \"submitScores\",\n    value: function submitScores(e) {\n      e.preventDefault();\n      var scores = [];\n      this.state.subjectList.forEach(function (s) {\n        if (document.getElementById(s.subjectId).value > -1) {\n          var newScore = {\n            subjectId: s.subjectId,\n            score: document.getElementById(s.subjectId).value\n          };\n          scores.push(newScore);\n        }\n      });\n      var scoreData = {\n        measureId: this.state.measure.measureId,\n        userEmail: localStorage.getItem(\"email\"),\n        criteriaTitle: \"Test\",\n        scores: scores\n      };\n      axios.post('http://localhost:5000/scoreSubmission/testScore', scoreData).then(function (res) {\n        if (res.data.inserted) {\n          alert(res.data.message);\n        } else {\n          alert(res.data.message);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Enter Scores\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.state.measure ? \"for measure: \" + this.state.measure.description : null), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Enter scores a percent of 100. Example: if 85%, then enter 85.\"), React.createElement(\"form\", {\n        onSubmit: this.submitScores,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(StubjectList, {\n        subjectList: this.state.subjectList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Select List of Subjects as .csv file: \"), React.createElement(\"input\", {\n        type: \"file\",\n        className: \"form-control-file\",\n        ref: this.fileInput,\n        onChange: this.changeFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), this.state.showFileAlert ? React.createElement(\"p\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Invalid File\") : null), React.createElement(\"input\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EvaluateTest;\n}(Component);\n\nexport { EvaluateTest as default };","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/evaluateTest.js"],"names":["React","Component","axios","StubjectList","props","subjectList","map","s","subjectName","subjectId","updateScoresInList","file","fileReader","FileReader","onloadend","e","lines","result","split","console","log","readAsText","EvaluateTest","fileInput","createRef","submitScores","bind","state","measure","showFileAlert","match","params","assignment","get","then","res","setState","data","current","files","type","preventDefault","scores","forEach","document","getElementById","value","newScore","score","push","scoreData","measureId","userEmail","localStorage","getItem","criteriaTitle","post","inserted","alert","message","description","changeFile"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\n\nconst StubjectList = props => {\n    return props.subjectList.map(s => {\n        return (\n            <div className=\"row no-gutters\">\n                <div className=\"col-2\">\n                    <span>{s.subjectName + \":\"}</span>\n                </div>\n                <div className=\"col-1\">\n                    <input id={s.subjectId} type=\"number\" min=\"0\" max=\"100\" />\n                </div>\n            </div>\n        )\n    })\n}\n\nfunction updateScoresInList(file)\n{\n    let fileReader = new FileReader();\n    fileReader.onloadend = e => {\n        let lines = fileReader.result.split(\"\\n\");\n        console.log(lines);\n    }\n    fileReader.readAsText(file);\n}\n\nexport default class EvaluateTest extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.fileInput = React.createRef();\n        this.submitScores = this.submitScores.bind(this);\n        this.state = {\n            subjectList: [],\n            subjectId: null,\n            measure: null,\n            showFileAlert: false\n        }\n    }\n\n    componentDidMount()\n    {\n        console.log(this.props.match.params.assignment);\n        axios.get('http://localhost:5000/assignments/subjectList/'+this.props.match.params.assignment)\n            .then(res => {\n                this.setState({\n                    subjectList: res.data.subjectList,\n                    subjectId: res.data.subjectList[0]\n                })\n            })\n        axios.get('http://localhost:5000/assignments/assignmentMeasure/' + this.props.match.params.assignment)\n            .then(res => {\n                this.setState({\n                    measure: res.data.measure\n                })\n            })\n    }\n\n    changeFile(e)\n    {\n        if (!(this.fileInput.current.files[0].type == \"text/csv\"))\n        {\n            this.setState({\n                showFileAlert: true\n            })\n        }\n        else\n        {\n            this.setState({\n                showFileAlert: false\n            })\n            updateScoresInList(this.fileInput.current.files[0]);\n        }\n    }\n\n    submitScores(e)\n    {\n        e.preventDefault();\n        let scores = [];\n        this.state.subjectList.forEach(s => {\n            if(document.getElementById(s.subjectId).value > -1)\n            {\n                let newScore = {\n                    subjectId: s.subjectId,\n                    score: document.getElementById(s.subjectId).value\n                }\n                scores.push(newScore);\n            }\n        })\n\n        let scoreData = {\n            measureId: this.state.measure.measureId,\n            userEmail: localStorage.getItem(\"email\"),\n            criteriaTitle: \"Test\",\n            scores: scores\n        }\n\n        axios.post('http://localhost:5000/scoreSubmission/testScore', scoreData)\n            .then(res => {\n                if (res.data.inserted)\n                {\n                    alert(res.data.message);\n                }\n                else\n                {\n                    alert(res.data.message);\n                }\n            });\n    }\n\n    render()\n    {\n        return (\n            <>\n                <h1>Enter Scores</h1>\n                <p>{this.state.measure ? \"for measure: \" + this.state.measure.description : null}</p>\n                <p>Enter scores a percent of 100. Example: if 85%, then enter 85.</p>\n                <form onSubmit={this.submitScores}>\n                    <StubjectList subjectList={this.state.subjectList} />\n                    <div className=\"form-group\">\n                        <label>Select List of Subjects as .csv file: </label>\n                        <input type=\"file\" className=\"form-control-file\" ref={this.fileInput} onChange={this.changeFile} />\n                        {this.state.showFileAlert ? <p className=\"text-danger\">Invalid File</p>: null}\n                    </div>\n                    <input className=\"btn btn-primary\" type=\"submit\" />\n                </form>\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}