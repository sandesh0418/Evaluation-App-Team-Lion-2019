{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\"; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Update user info\n\nexport var updateUser = function updateUser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/users/update\", userData).then(function (res) {\n      return history.push(\"/update\");\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"/users/login\", userData).then(function (res) {\n      // Save to localStorage\n      // Set token to localStorage\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token);\n      localStorage.setItem(\"role\", res.data.role);\n      localStorage.setItem(\"dept_Id\", res.data.department);\n      localStorage.setItem(\"name\", res.data.name); // Decode token to get user data\n\n      var decoded = token; // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    localStorage.removeItem(\"role\");\n    localStorage.removeItem(\"name\");\n    setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","updateUser","loginUser","token","localStorage","setItem","role","department","name","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//Update user info\nexport const updateUser = (userData, history) => dispatch => {\n  axios.post(\"/users/update\", userData)\n  .then(res => history.push(\"/update\"))\n  .catch(err =>\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    })\n    );\n}\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      localStorage.setItem(\"role\", res.data.role);\n      localStorage.setItem(\"dept_Id\", res.data.department);\n      localStorage.setItem(\"name\", res.data.name);\n      // Decode token to get user data\n      const decoded = (token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  localStorage.removeItem(\"role\");\n  localStorage.removeItem(\"name\");\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n \n};\n"]},"metadata":{},"sourceType":"module"}