{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/Rubric/createRubric.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRubric, updateRubric, updateTitle } from '../../../actions/rubric';\nimport { Table, FormControl, Form } from 'react-bootstrap';\nimport '../../../stylesheets/rubric.css';\nimport Loader from 'react-loader-spinner';\n\nvar createRubric =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(createRubric, _Component);\n\n  function createRubric(props) {\n    var _this;\n\n    _classCallCheck(this, createRubric);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(createRubric).call(this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      saveRubric: [],\n      weight: true,\n      rubricTitle: \"\",\n      title: true\n    };\n    return _this;\n  }\n\n  _createClass(createRubric, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n\n      if (this.props.rubric.rubric[2].weight === true && this.state.title === true) {\n        window.location.replace(\"/rubricList\");\n      } else {\n        if (this.props.rubric.rubric[2].weight === false) {\n          this.setState({\n            weight: false\n          });\n        }\n\n        if (!this.state.title) {\n          this.setState({\n            title: false\n          });\n        }\n      }\n    }\n  }, {\n    key: \"titleChange\",\n    value: function titleChange(e) {\n      var obj = {\n        Rubric_Id: e.target.name,\n        Rubric_Title: e.target.value\n      };\n      this.setState({\n        rubricTitle: e.target.value\n      });\n\n      if (!e.target.value) {\n        this.setState({\n          title: false\n        });\n      } else {\n        this.setState({\n          title: true\n        });\n      }\n\n      this.props.updateTitle(obj);\n      this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"));\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var obj = {\n        Row: e.target.id,\n        Rubric_Id: e.target.name,\n        value: e.target.value\n      };\n\n      if (e.target.id.includes(\"weight\")) {\n        this.setState({\n          weight: this.state.weight + parseFloat(e.target.value)\n        });\n      }\n\n      this.props.updateRubric(obj);\n      this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var weight = false;\n      var display;\n      var row;\n      var weight = 0;\n      var load;\n      var Rubric_Id = \"\";\n      var rubric = this.props.rubric.rubric;\n\n      if (rubric) {\n        this.state.rubricTitle = rubric[0][0].Rubric_Title;\n        Rubric_Id = rubric[0][0].Rubric_Id;\n        display = rubric[0].map(function (singleValue, index) {\n          return React.createElement(\"th\", {\n            key: index,\n            className: \"borderedCell\",\n            style: {\n              padding: \"0\",\n              textAlign: \"center\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, React.createElement(FormControl, {\n            as: \"textarea\",\n            \"aria-label\": \"With textarea\",\n            name: singleValue.Rubric_Id,\n            onChange: _this2.onChange.bind(_this2),\n            defaultValue: singleValue.Value_Name,\n            id: \"scale\" + \" \" + singleValue.Value_Number,\n            className: \"measureTitle centerAlign cells\",\n            style: {\n              width: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }), \"Value- \", singleValue.Value_Number);\n        });\n\n        if (rubric[1][0][0].weight === undefined) {\n          row = rubric[1].map(function (single, index) {\n            return React.createElement(\"tr\", {\n              key: index,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\",\n                textAlign: \"center\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 146\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].Criteria_Title,\n              id: \"criteria\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148\n              },\n              __self: this\n            })), single.map(function (value, i) {\n              return React.createElement(\"td\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 163\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: single[0].Rubric_Id,\n                onChange: _this2.onChange.bind(_this2),\n                defaultValue: value.Data,\n                id: \"data\" + \" \" + value.Row_Id + \" \" + value.index,\n                className: \"measureTitle centerAlign cells\",\n                style: {\n                  width: \"100%\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 164\n                },\n                __self: this\n              }));\n            }));\n          });\n        } else {\n          weight = 1;\n          row = rubric[1].map(function (single, index) {\n            return React.createElement(\"tr\", {\n              key: index,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\",\n                textAlign: \"center\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].Criteria_Title,\n              id: \"criteria\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190\n              },\n              __self: this\n            })), single.map(function (value, i) {\n              return React.createElement(\"td\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 205\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: single[0].Rubric_Id,\n                onChange: _this2.onChange.bind(_this2),\n                defaultValue: value.Data,\n                id: \"data\" + \" \" + value.Row_Id + \" \" + value.index,\n                className: \"measureTitle centerAlign cells\",\n                style: {\n                  width: \"100%\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 206\n                },\n                __self: this\n              }));\n            }), React.createElement(\"td\", {\n              key: index + 1,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 220\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].weight,\n              id: \"weight\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 221\n              },\n              __self: this\n            })));\n          });\n        }\n      } else {\n        load = React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, React.createElement(Loader, {\n          type: \"Oval\",\n          color: \"black\",\n          height: \"100\",\n          width: \"100\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, this.state.title ? null : React.createElement(\"p\", {\n        className: \"alert alert-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        style: {\n          paddingRight: \"10px\",\n          fontSize: \"20px\"\n        },\n        class: \"fas fa-exclamation-triangle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), \"Rubric title cannot be empty\"), React.createElement(\"input\", {\n        type: \"text\",\n        defaultValue: this.state.rubricTitle,\n        name: Rubric_Id,\n        onChange: this.titleChange.bind(this),\n        style: {\n          width: \"25%\",\n          margin: \"30px 37.5%\",\n          border: \"2px solid #dee2e6\",\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), this.state.weight ? null : React.createElement(\"p\", {\n        className: \"alert alert-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        style: {\n          paddingRight: \"10px\",\n          fontSize: \"20px\"\n        },\n        class: \"fas fa-exclamation-triangle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }), \"Rubric has not been saved!!! Total weight is not 100% !!\"), React.createElement(Table, {\n        bordered: true,\n        striped: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, load, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"Criteria\"), display, weight ? React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"Weight\") : null)), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, row)), React.createElement(\"button\", {\n        style: {\n          width: \"150px\",\n          borderRadius: \"3px\",\n          letterSpacing: \"1.5px\",\n          marginTop: \"1rem\",\n          padding: \"15px\"\n        },\n        type: \"submit\",\n        className: \"btn btn-large btn-success waves-effect waves-light hoverable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return createRubric;\n}(Component);\n\ncreateRubric.propTypes = {\n  getRubric: PropTypes.func.isRequired,\n  updateRubric: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n  rubric: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    rubric: state.rubric\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRubric: getRubric,\n  updateTitle: updateTitle,\n  updateRubric: updateRubric\n})(createRubric);","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/Rubric/createRubric.js"],"names":["React","Component","PropTypes","connect","getRubric","updateRubric","updateTitle","Table","FormControl","Form","Loader","createRubric","props","onSubmit","bind","state","saveRubric","weight","rubricTitle","title","localStorage","getItem","e","preventDefault","rubric","window","location","replace","setState","obj","Rubric_Id","target","name","Rubric_Title","value","Row","id","includes","parseFloat","display","row","load","map","singleValue","index","padding","textAlign","onChange","Value_Name","Value_Number","width","undefined","single","Criteria_Title","Row_Id","i","Data","paddingRight","fontSize","titleChange","margin","border","borderRadius","letterSpacing","marginTop","propTypes","func","isRequired","object","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRubric, updateRubric, updateTitle} from '../../../actions/rubric';\nimport { Table, FormControl, Form } from 'react-bootstrap';\n\nimport '../../../stylesheets/rubric.css';\nimport Loader from 'react-loader-spinner';\n\nclass createRubric extends Component{\n\n    constructor(props) {\n        super();\n        this.onSubmit= this.onSubmit.bind(this);\n        this.state = {\n            saveRubric: [],\n            weight: true,\n            rubricTitle: \"\",\n            title: true\n        }\n\n        \n    }\n    componentDidMount(){\n        \n        \n        this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"));\n          \n      }\n    \n     \n\n \n    onSubmit(e){\n        e.preventDefault();\n        \n        if(this.props.rubric.rubric[2].weight === true && this.state.title === true){\n           \n            window.location.replace(\"/rubricList\");\n        }\n\n        else{\n            if(this.props.rubric.rubric[2].weight  === false){\n                this.setState({weight: false});\n            }\n            if(!this.state.title){\n                this.setState({\n                    title: false\n                })\n            }\n            \n        }\n\n        \n            \n        \n    }\n\n    titleChange(e){\n        const obj ={\n            Rubric_Id: e.target.name,\n            Rubric_Title: e.target.value\n        }\n        this.setState({\n            rubricTitle: e.target.value\n        })\n\n        if(!e.target.value){\n            this.setState({\n                title: false\n            }) \n        }\n        else{\n            this.setState({\n                title: true\n            }) \n        }\n        this.props.updateTitle(obj)\n        \n        this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"))\n    }\n    \n\n\n    onChange(e){\n        const obj = {\n            Row: e.target.id,\n            Rubric_Id: e.target.name,\n            value: e.target.value\n        }\n\n        if(e.target.id.includes(\"weight\")){\n            this.setState({weight: this.state.weight+parseFloat(e.target.value)})\n        }\n        \n        \n        this.props.updateRubric(obj);\n       \n        this.props.getRubric(localStorage.getItem(\"Rubric_Id\"), localStorage.getItem(\"Cycle_Id\"));\n        \n \n\n    }\n   \n   \n    \n   \n      \n    render(){\n        var weight = false;\n        var display;\n        var row;\n        var weight = 0;\n        var load;\n        var Rubric_Id = \"\";\n        \n        let { rubric } = this.props.rubric;\n        \n\n       if(rubric){\n           this.state.rubricTitle=rubric[0][0].Rubric_Title;\n            Rubric_Id = rubric[0][0].Rubric_Id;\n            \n                display = rubric[0].map((singleValue, index) => (\n                    <th key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label =\"With textarea\"\n                                name = {singleValue.Rubric_Id}\n                                onChange={this.onChange.bind(this)}\n                                defaultValue={singleValue.Value_Name}\n                                id={\"scale\"+ \" \" +singleValue.Value_Number}\n                                className=\"measureTitle centerAlign cells\"\n                                style = {{width : \"100%\"}}/>\n                            Value- {singleValue.Value_Number}\n                    </th>\n                ))\n            \n            \n\n\n      \n        if(rubric[1][0][0].weight === undefined){\n        row = rubric[1].map((single, index) => (\n            \n            <tr key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                <td key = {index}>\n                        <FormControl \n                                as = \"textarea\"\n                                aria-label =\"With textarea\"\n                                name = {single[0].Rubric_Id}\n                                onChange={this.onChange.bind(this)}\n                                defaultValue={single[0].Criteria_Title}\n                                id={\"criteria\"+\" \"+single[0].Row_Id}\n                                className=\"measureTitle centerAlign cells\"\n                                style = {{width : \"100%\"}}/>\n                               \n                        \n                    </td>\n\n                    {\n                        single.map((value, i ) =>(\n                            <td key ={i}>\n                            <FormControl \n                                        as = \"textarea\"\n                                        aria-label =\"With textarea\"\n                                        name = {single[0].Rubric_Id}\n                                        onChange={this.onChange.bind(this)}\n                                        defaultValue={value.Data}\n                                        id={\"data\"+\" \"+value.Row_Id+\" \"+value.index}\n                                        className=\"measureTitle centerAlign cells\"\n                                        style = {{width : \"100%\"}}/>\n                                \n                            </td>\n                        ))\n                    }\n                \n                \n            </tr>\n            \n        ))\n       }\n    \n        else{\n            weight = 1;\n            row = rubric[1].map((single, index) => (\n            \n                <tr key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                    <td key = {index}>\n                            <FormControl \n                                    as = \"textarea\"\n                                    aria-label =\"With textarea\"\n                                    name = {single[0].Rubric_Id}\n                                    onChange={this.onChange.bind(this)}\n                                    defaultValue={single[0].Criteria_Title}\n                                    id={\"criteria\"+\" \"+single[0].Row_Id}\n                                    className=\"measureTitle centerAlign cells\"\n                                    style = {{width : \"100%\"}}/>\n                                   \n                            \n                        </td>\n    \n                        {\n                            single.map((value, i ) =>(\n                                <td key ={i}>\n                                <FormControl \n                                            as = \"textarea\"\n                                            aria-label =\"With textarea\"\n                                            name = {single[0].Rubric_Id}\n                                            onChange={this.onChange.bind(this)}\n                                            defaultValue={value.Data}\n                                            id={\"data\"+\" \"+value.Row_Id+\" \"+value.index}\n                                            className=\"measureTitle centerAlign cells\"\n                                            style = {{width : \"100%\"}}/>\n                                    \n                                </td>\n                            ))\n                        }\n\n                        {<td key = {index+1}>\n                            <FormControl \n                                    as = \"textarea\"\n                                    aria-label =\"With textarea\"\n                                    name = {single[0].Rubric_Id}\n                                    onChange={this.onChange.bind(this)}\n                                    defaultValue={single[0].weight}\n                                    id={\"weight\"+\" \"+single[0].Row_Id}\n                                    className=\"measureTitle centerAlign cells\"\n                                    style = {{width : \"100%\"}}/>\n                                   \n                            \n                        </td>\n                        }                       \n                    \n                </tr>\n                \n            ))\n        }\n    }\n       else{\n          \n        load = <tbody><tr>\n        <Loader \n        type=\"Oval\"\n        \n        color=\"black\"\n        height=\"100\"\t\n        width=\"100\"\n     />\n      </tr></tbody>;\n\n\n           \n       }\n      \n       \n        \n       \n        return(\n           \n           \n           <Form onSubmit={this.onSubmit}>\n           {this.state.title ? null:  <p className = \"alert alert-danger text-center\"><i style={{paddingRight: \"10px\", fontSize: \"20px\"}}class=\"fas fa-exclamation-triangle\"></i>Rubric title cannot be empty</p>}\n           <input type=\"text\" \n                    defaultValue ={this.state.rubricTitle}\n                    name={Rubric_Id}\n                    onChange={this.titleChange.bind(this)}\n                    style={{width: \"25%\", margin: \"30px 37.5%\", border: \"2px solid #dee2e6\", textAlign: \"center\"}}/> \n            {this.state.weight ? null: <p className = \"alert alert-danger text-center\"><i style={{paddingRight: \"10px\", fontSize: \"20px\"}}class=\"fas fa-exclamation-triangle\"></i>Rubric has not been saved!!! Total weight is not 100% !!</p>}\n            <Table bordered striped>\n            {load} \n            <thead>\n                <tr>\n                <th className=\"centered borderedCell\">Criteria</th>\n                {display}\n            {weight ? <th className=\"centered borderedCell\">Weight</th> : null }\n           </tr>\n            </thead>\n            <tbody>\n                { row }\n            </tbody>\n            </Table>\n\n            <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"1rem\",\n                    padding: \"15px\"\n                  }}\n                  \n                  type=\"submit\"\n                  className=\"btn btn-large btn-success waves-effect waves-light hoverable\"\n                >\n                  Save\n                </button>\n            </Form>\n        );\n    }\n}\n\ncreateRubric.propTypes = {\n    getRubric: PropTypes.func.isRequired,\n    updateRubric: PropTypes.func.isRequired,\n    updateTitle: PropTypes.func.isRequired,\n    rubric: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n        auth: state.auth,\n        rubric: state.rubric\n})\n\nexport default connect (mapStateToProps, { getRubric, updateTitle, updateRubric})(createRubric);"]},"metadata":{},"sourceType":"module"}