{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/createRubric.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRubric, updateRubric } from '../../actions/rubric';\nimport { Table, FormControl } from 'react-bootstrap';\nimport { ClipLoader } from 'react-spinners';\nimport '../../stylesheets/rubric.css';\n\nvar createRubric =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(createRubric, _Component);\n\n  function createRubric(props) {\n    var _this;\n\n    _classCallCheck(this, createRubric);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(createRubric).call(this));\n    _this.state = {\n      saveRubric: []\n    };\n    return _this;\n  }\n\n  _createClass(createRubric, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getRubric(localStorage.getItem(\"title\"), localStorage.getItem(\"dept_Id\"));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var obj = {\n        Row: e.target.id,\n        Rubric_Id: e.target.name,\n        value: e.target.value\n      };\n      this.props.updateRubric(obj);\n      this.props.getRubric(localStorage.getItem(\"title\"), localStorage.getItem(\"dept_Id\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var weight = false;\n      var display = \"\";\n      var row = \"\";\n      var weight = 0;\n      var load = '';\n      var rubric = this.props.rubric.rubric;\n\n      if (rubric) {\n        display = rubric[0].map(function (singleValue, index) {\n          return React.createElement(\"th\", {\n            key: index,\n            className: \"borderedCell\",\n            style: {\n              padding: \"0\",\n              textAlign: \"center\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(FormControl, {\n            as: \"textarea\",\n            \"aria-label\": \"With textarea\",\n            name: singleValue.Rubric_Id,\n            onChange: _this2.onChange.bind(_this2),\n            defaultValue: singleValue.Value_Name,\n            id: \"scale\" + \" \" + singleValue.Value_Number,\n            className: \"measureTitle centerAlign cells\",\n            style: {\n              width: \"100%\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }), \"Value- \", singleValue.Value_Number);\n        });\n        console.log(rubric[1][0][0].weight);\n\n        if (rubric[1][0][0].weight === undefined) {\n          row = rubric[1].map(function (single, index) {\n            return React.createElement(\"tr\", {\n              key: index,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\",\n                textAlign: \"center\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 91\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].Criteria_Title,\n              id: \"criteria\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 93\n              },\n              __self: this\n            })), single.map(function (value, i) {\n              return React.createElement(\"td\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 108\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: single[0].Rubric_Id,\n                onChange: _this2.onChange.bind(_this2),\n                defaultValue: value.Data,\n                id: \"data\" + \" \" + value.Row_Id + \" \" + value.index,\n                className: \"measureTitle centerAlign cells\",\n                style: {\n                  width: \"100%\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 109\n                },\n                __self: this\n              }));\n            }));\n          });\n        } else {\n          weight = 1;\n          row = rubric[1].map(function (single, index) {\n            return React.createElement(\"tr\", {\n              key: index,\n              className: \"borderedCell\",\n              style: {\n                padding: \"0\",\n                textAlign: \"center\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            }, React.createElement(\"td\", {\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].Criteria_Title,\n              id: \"criteria\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135\n              },\n              __self: this\n            })), single.map(function (value, i) {\n              return React.createElement(\"td\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 150\n                },\n                __self: this\n              }, React.createElement(FormControl, {\n                as: \"textarea\",\n                \"aria-label\": \"With textarea\",\n                name: single[0].Rubric_Id,\n                onChange: _this2.onChange.bind(_this2),\n                defaultValue: value.Data,\n                id: \"data\" + \" \" + value.Row_Id + \" \" + value.index,\n                className: \"measureTitle centerAlign cells\",\n                style: {\n                  width: \"100%\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 151\n                },\n                __self: this\n              }));\n            }), React.createElement(\"td\", {\n              key: single[0].Row_Id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165\n              },\n              __self: this\n            }, React.createElement(FormControl, {\n              as: \"textarea\",\n              \"aria-label\": \"With textarea\",\n              name: single[0].Rubric_Id,\n              onChange: _this2.onChange.bind(_this2),\n              defaultValue: single[0].weight,\n              id: \"weight\" + \" \" + single[0].Row_Id,\n              className: \"measureTitle centerAlign cells\",\n              style: {\n                width: \"100%\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            })));\n          });\n        }\n      } else {\n        load = React.createElement(\"div\", {\n          className: \"sweet-loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(ClipLoader, {\n          sizeUnit: \"px\",\n          size: 150,\n          color: '#123abc',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Table, {\n        bordered: true,\n        striped: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Criteria\"), load, display, weight ? React.createElement(\"th\", {\n        className: \"centered borderedCell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Weight\") : \"\")), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, row)));\n    }\n  }]);\n\n  return createRubric;\n}(Component);\n\ncreateRubric.propTypes = {\n  getRubric: PropTypes.func.isRequired,\n  updateRubric: PropTypes.func.isRequired,\n  rubric: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    rubric: state.rubric\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getRubric: getRubric,\n  updateRubric: updateRubric\n})(createRubric);","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/createRubric.js"],"names":["React","Component","PropTypes","connect","getRubric","updateRubric","Table","FormControl","ClipLoader","createRubric","props","state","saveRubric","localStorage","getItem","e","preventDefault","obj","Row","target","id","Rubric_Id","name","value","weight","display","row","load","rubric","map","singleValue","index","padding","textAlign","onChange","bind","Value_Name","Value_Number","width","console","log","undefined","single","Criteria_Title","Row_Id","i","Data","propTypes","func","isRequired","object","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRubric, updateRubric} from '../../actions/rubric';\nimport { Table, FormControl } from 'react-bootstrap';\nimport { ClipLoader } from 'react-spinners';\nimport '../../stylesheets/rubric.css';\n\nclass createRubric extends Component{\n\n    constructor(props) {\n        super();\n        this.state = {\n            saveRubric: []\n        }\n\n        \n    }\n    componentDidMount(){\n       \n        \n        this.props.getRubric(localStorage.getItem(\"title\"), localStorage.getItem(\"dept_Id\"));\n        \n      }\n    \n     \n\n \n    onSubmit(e){\n        e.preventDefault();\n    }\n\n    \n\n\n    onChange(e){\n        const obj = {\n            Row: e.target.id,\n            Rubric_Id: e.target.name,\n            value: e.target.value\n        }\n        \n        this.props.updateRubric(obj);\n       \n        this.props.getRubric(localStorage.getItem(\"title\"), localStorage.getItem(\"dept_Id\"));\n        \n\n\n    }\n   \n   \n    \n   \n      \n    render(){\n        var weight = false;\n        var display = \"\";\n        var row = \"\";\n        var weight = 0;\n        var load = '';\n        \n        let { rubric } = this.props.rubric;\n        \n\n       if(rubric){\n           \n        \n            \n                display = rubric[0].map((singleValue, index) => (\n                    <th key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                    <FormControl \n                                as = \"textarea\"\n                                aria-label =\"With textarea\"\n                                name = {singleValue.Rubric_Id}\n                                onChange={this.onChange.bind(this)}\n                                defaultValue={singleValue.Value_Name}\n                                id={\"scale\"+ \" \" +singleValue.Value_Number}\n                                className=\"measureTitle centerAlign cells\"\n                                style = {{width : \"100%\"}}/>\n                            Value- {singleValue.Value_Number}\n                    </th>\n                ))\n            \n            \n\n\n      console.log(rubric[1][0][0].weight)\n        if(rubric[1][0][0].weight === undefined){\n        row = rubric[1].map((single, index) => (\n            \n            <tr key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                <td key = {index}>\n                        <FormControl \n                                as = \"textarea\"\n                                aria-label =\"With textarea\"\n                                name = {single[0].Rubric_Id}\n                                onChange={this.onChange.bind(this)}\n                                defaultValue={single[0].Criteria_Title}\n                                id={\"criteria\"+\" \"+single[0].Row_Id}\n                                className=\"measureTitle centerAlign cells\"\n                                style = {{width : \"100%\"}}/>\n                               \n                        \n                    </td>\n\n                    {\n                        single.map((value, i ) =>(\n                            <td key ={i}>\n                            <FormControl \n                                        as = \"textarea\"\n                                        aria-label =\"With textarea\"\n                                        name = {single[0].Rubric_Id}\n                                        onChange={this.onChange.bind(this)}\n                                        defaultValue={value.Data}\n                                        id={\"data\"+\" \"+value.Row_Id+\" \"+value.index}\n                                        className=\"measureTitle centerAlign cells\"\n                                        style = {{width : \"100%\"}}/>\n                                \n                            </td>\n                        ))\n                    }\n                \n                \n            </tr>\n            \n        ))\n       }\n    \n        else{\n            weight = 1;\n            row = rubric[1].map((single, index) => (\n            \n                <tr key ={index} className=\"borderedCell\" style = {{padding: \"0\", textAlign: \"center\"}} >\n                    <td key = {index}>\n                            <FormControl \n                                    as = \"textarea\"\n                                    aria-label =\"With textarea\"\n                                    name = {single[0].Rubric_Id}\n                                    onChange={this.onChange.bind(this)}\n                                    defaultValue={single[0].Criteria_Title}\n                                    id={\"criteria\"+\" \"+single[0].Row_Id}\n                                    className=\"measureTitle centerAlign cells\"\n                                    style = {{width : \"100%\"}}/>\n                                   \n                            \n                        </td>\n    \n                        {\n                            single.map((value, i ) =>(\n                                <td key ={i}>\n                                <FormControl \n                                            as = \"textarea\"\n                                            aria-label =\"With textarea\"\n                                            name = {single[0].Rubric_Id}\n                                            onChange={this.onChange.bind(this)}\n                                            defaultValue={value.Data}\n                                            id={\"data\"+\" \"+value.Row_Id+\" \"+value.index}\n                                            className=\"measureTitle centerAlign cells\"\n                                            style = {{width : \"100%\"}}/>\n                                    \n                                </td>\n                            ))\n                        }\n\n                        {<td key = {single[0].Row_Id}>\n                            <FormControl \n                                    as = \"textarea\"\n                                    aria-label =\"With textarea\"\n                                    name = {single[0].Rubric_Id}\n                                    onChange={this.onChange.bind(this)}\n                                    defaultValue={single[0].weight}\n                                    id={\"weight\"+\" \"+single[0].Row_Id}\n                                    className=\"measureTitle centerAlign cells\"\n                                    style = {{width : \"100%\"}}/>\n                                   \n                            \n                        </td>\n                        }                       \n                    \n                </tr>\n                \n            ))\n        }\n    }\n       else{\n          \n        load = <div className='sweet-loading'>\n        <ClipLoader\n         \n          sizeUnit={\"px\"}\n          size={150}\n          color={'#123abc'}\n          \n        />\n      </div>;\n\n        \n        \n               \n\n       \n           \n       }\n      \n       \n        \n       \n        return(\n           \n           \n           <>\n            \n            <Table bordered striped>\n            <thead>\n                <tr>\n                    <th className=\"centered borderedCell\">Criteria</th>\n                    {load}\n            {display}\n            { weight ? <th className=\"centered borderedCell\">Weight</th> : \"\" }\n           \n            </tr>\n            </thead>\n            <tbody>\n                \n                { row }\n                \n            </tbody>\n            </Table>\n            </>\n        );\n    }\n}\n\ncreateRubric.propTypes = {\n    getRubric: PropTypes.func.isRequired,\n    updateRubric: PropTypes.func.isRequired,\n    rubric: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n        auth: state.auth,\n        rubric: state.rubric\n})\n\nexport default connect (mapStateToProps, { getRubric, updateRubric })(createRubric);"]},"metadata":{},"sourceType":"module"}