{"ast":null,"code":"import _classCallCheck from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/editProgramSummary/addRubricMeasurePopup.js\";\nimport React, { Component } from 'react';\nimport './popup.css';\n/**\n * Props:\n * -closePopup: a function to close the popup.\n * -rubrics: the list of rubrics to show in select form.\n * -submit: a function to save the changes to the measure.\n * -handleInputChange: a function to take inputs by name and update their state.\n * -rubric: the current selected rubric.\n * -description: the description that will be in the new measure\n * -targetScore: the target score of the new measure\n * -percentToReachTarget: the percent to reach to the target score\n */\n\nvar Rubrics = function Rubrics(props) {\n  return props.rubrics.map(function (r) {\n    return React.createElement(\"option\", {\n      key: r.Rubric_Title,\n      value: r.Rubric_Title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, r.Rubric_Title);\n  });\n};\n\nvar SelectTargetScore = function SelectTargetScore(props) {\n  return props.rubric.scale.map(function (s) {\n    return React.createElement(\"option\", {\n      key: s.Value_Number,\n      value: s.Value_Number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, s.Value_Name);\n  });\n};\n\nvar AddRubricMeasurePopup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddRubricMeasurePopup, _Component);\n\n  function AddRubricMeasurePopup(props) {\n    var _this;\n\n    _classCallCheck(this, AddRubricMeasurePopup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddRubricMeasurePopup).call(this, props));\n    _this.mapTitleToRubric = _this.mapTitleToRubric.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddRubricMeasurePopup, [{\n    key: \"mapTitleToRubric\",\n    value: function mapTitleToRubric() {\n      var _this2 = this;\n\n      var index = this.props.rubrics.findIndex(function (r) {\n        return r.Rubric_Title === _this2.props.rubric;\n      });\n      console.log(this.props.rubrics[index].scale[0]);\n      return this.props.rubrics[index];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"popup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"popup_inner p-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Define Rubric Measure\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Description of new measure: \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"At least \" + this.props.percentToReachTarget + \"% of subjects score a '\" + this.mapTitleToRubric().scale[this.props.targetScore - 1].Value_Name + \"' or higher on \" + this.props.rubric + \".\"), React.createElement(\"p\", {\n        className: \"ml-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.props.description), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Select rubric: \"), React.createElement(\"select\", {\n        className: \"form-control\",\n        value: this.props.rubric,\n        name: \"toolName\",\n        onChange: this.props.handleInputChange,\n        onClick: this.props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Rubrics, {\n        rubrics: this.props.rubrics,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Enter Measure Description: \"), React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"7\",\n        name: \"description\",\n        placeholder: \"(Optional) Add additional information.\",\n        value: this.props.description,\n        onChange: this.props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Select target score: \"), React.createElement(\"select\", {\n        className: \"form-control bg-sm\",\n        name: \"targetScore\",\n        value: this.props.targetScore,\n        onChange: this.props.handleInputChange,\n        onClick: this.props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(SelectTargetScore, {\n        rubric: this.mapTitleToRubric(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Enter percent to achieve score: \"), React.createElement(\"input\", {\n        type: \"number\",\n        className: \"form-control\",\n        name: \"percentToReachTarget\",\n        value: this.props.percentToReachTarget,\n        onChange: this.props.handleInputChange,\n        min: \"0\",\n        max: \"100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        className: \"btn btn-primary mr-4\",\n        name: \"rubricMeasure\",\n        onClick: this.props.submit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"btn btn-danger mr-4\",\n        onClick: this.props.closePopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }]);\n\n  return AddRubricMeasurePopup;\n}(Component);\n\nexport { AddRubricMeasurePopup as default };","map":{"version":3,"sources":["/Users/RyanBlomquist/Documents/GitHub/Evaluation-App-Team-Lion-2019/Evaluation-App-Team-Lion-2019/clients/src/components/dashboard/editProgramSummary/addRubricMeasurePopup.js"],"names":["React","Component","Rubrics","props","rubrics","map","r","Rubric_Title","SelectTargetScore","rubric","scale","s","Value_Number","Value_Name","AddRubricMeasurePopup","mapTitleToRubric","bind","index","findIndex","console","log","percentToReachTarget","targetScore","description","handleInputChange","submit","closePopup"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './popup.css';\n\n/**\n * Props:\n * -closePopup: a function to close the popup.\n * -rubrics: the list of rubrics to show in select form.\n * -submit: a function to save the changes to the measure.\n * -handleInputChange: a function to take inputs by name and update their state.\n * -rubric: the current selected rubric.\n * -description: the description that will be in the new measure\n * -targetScore: the target score of the new measure\n * -percentToReachTarget: the percent to reach to the target score\n */\n\nconst Rubrics = props => {\n  return props.rubrics.map(r => {\n    return <option key={r.Rubric_Title} value={r.Rubric_Title}>{r.Rubric_Title}</option>\n  })\n}\n\nconst SelectTargetScore = props => {\n  return props.rubric.scale.map(s => {\n    return <option key={s.Value_Number} value={s.Value_Number}>{s.Value_Name}</option>\n  })\n}\n\nexport default class AddRubricMeasurePopup extends Component\n{\n\n    constructor(props)\n    {\n      super(props);\n      this.mapTitleToRubric = this.mapTitleToRubric.bind(this);\n    }\n\n    mapTitleToRubric()\n    {\n      let index = this.props.rubrics.findIndex(r => r.Rubric_Title === this.props.rubric);\n      console.log(this.props.rubrics[index].scale[0]);\n      return this.props.rubrics[index];\n    }\n\n    render() {\n        return (\n          <div className='popup'>\n            <div className='popup_inner p-4'>\n              <h1>Define Rubric Measure</h1>\n              <label>Description of new measure: </label>\n              <p>\n                {\"At least \" + this.props.percentToReachTarget + \"% of subjects score a '\" + \n                this.mapTitleToRubric().scale[this.props.targetScore - 1].Value_Name + \"' or higher on \" + \n                this.props.rubric + \".\"}\n              </p>\n              <p className=\"ml-3\">{this.props.description}</p>\n              <form>\n                <div className=\"form-group\">\n                  <label>Select rubric: </label>\n                  <select \n                    className=\"form-control\"\n                    value={this.props.rubric} \n                    name=\"toolName\"\n                    onChange={this.props.handleInputChange}\n                    onClick={this.props.handleInputChange}>\n                    <Rubrics rubrics={this.props.rubrics} />\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Enter Measure Description: </label>\n                  <textarea \n                    className=\"form-control\" \n                    rows=\"7\"\n                    name=\"description\"\n                    placeholder=\"(Optional) Add additional information.\"\n                    value={this.props.description}\n                    onChange={this.props.handleInputChange} \n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Select target score: </label>\n                  <select \n                    className=\"form-control bg-sm\"\n                    name=\"targetScore\"\n                    value={this.props.targetScore} \n                    onChange={this.props.handleInputChange}\n                    onClick={this.props.handleInputChange}>\n                    <SelectTargetScore rubric={this.mapTitleToRubric()} />\n                  </select>\n                </div>\n                <div className=\"form-group\">\n                  <label>Enter percent to achieve score: </label>\n                  <input \n                    type=\"number\" \n                    className=\"form-control\"\n                    name=\"percentToReachTarget\"\n                    value={this.props.percentToReachTarget}\n                    onChange={this.props.handleInputChange} \n                    min=\"0\" \n                    max=\"100\" />\n                </div>\n              </form>\n              <button\n                className=\"btn btn-primary mr-4\" \n                name=\"rubricMeasure\"\n                onClick={this.props.submit}>\n                Submit\n              </button>\n              <button \n                className=\"btn btn-danger mr-4\" \n                onClick={this.props.closePopup}>\n                Cancel\n              </button>\n            </div>\n          </div>\n        );\n      }\n}"]},"metadata":{},"sourceType":"module"}